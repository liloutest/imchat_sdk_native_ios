// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: msggateway.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "Msggateway.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AgentUserJoinSessionMsg);
GPBObjCClassDeclaration(CreateSessionMsg);
GPBObjCClassDeclaration(EndSessionMsg);
GPBObjCClassDeclaration(HasReadReceiptMsg);
GPBObjCClassDeclaration(Join);
GPBObjCClassDeclaration(JoinResp);
GPBObjCClassDeclaration(KickOffLineMsg);
GPBObjCClassDeclaration(MsgBody);
GPBObjCClassDeclaration(MsgEntityToFrontEnd);
GPBObjCClassDeclaration(MsgEntityToServer);
GPBObjCClassDeclaration(SessionBasic);
GPBObjCClassDeclaration(State);

#pragma mark - MsggatewayRoot

@implementation MsggatewayRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription MsggatewayRoot_FileDescription = {
  .package = "imminer.msggateway",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum MsgType

GPBEnumDescriptor *MsgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "JoinServer\000TextMsgType\000ImgMsgType\000VideoM"
        "sgType\000CreateSessionMsgType\000AgentUserJoi"
        "nSessionMsgType\000HasReadReceiptMsgType\000Ki"
        "ckOffLineMsgType\000FaqMsgType\000KnowledgePoi"
        "ntMsgType\000KnowledgeAnswerMsgType\000EndSess"
        "ionMsgType\000";
    static const int32_t values[] = {
        MsgType_JoinServer,
        MsgType_TextMsgType,
        MsgType_ImgMsgType,
        MsgType_VideoMsgType,
        MsgType_CreateSessionMsgType,
        MsgType_AgentUserJoinSessionMsgType,
        MsgType_HasReadReceiptMsgType,
        MsgType_KickOffLineMsgType,
        MsgType_FaqMsgType,
        MsgType_KnowledgePointMsgType,
        MsgType_KnowledgeAnswerMsgType,
        MsgType_EndSessionMsgType,
    };
    static const char *extraTextFormatInfo = "\014\000\n\000\001\013\000\002\n\000\003\014\000\004\024\000\005\033\000\006\025\000\007\022\000\010\n\000\t\025\000\n\026\000\013\021\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MsgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MsgType_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MsgType_JoinServer:
    case MsgType_TextMsgType:
    case MsgType_ImgMsgType:
    case MsgType_VideoMsgType:
    case MsgType_CreateSessionMsgType:
    case MsgType_AgentUserJoinSessionMsgType:
    case MsgType_HasReadReceiptMsgType:
    case MsgType_KickOffLineMsgType:
    case MsgType_FaqMsgType:
    case MsgType_KnowledgePointMsgType:
    case MsgType_KnowledgeAnswerMsgType:
    case MsgType_EndSessionMsgType:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - State

@implementation State

@dynamic code;
@dynamic message;

typedef struct State__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *message;
} State__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = State_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(State__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = State_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(State__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(State)
                                   messageName:@"State"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(State__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgEntityToServer

@implementation MsgEntityToServer

@dynamic msgType;
@dynamic seq;
@dynamic hasJoin, join;
@dynamic hasMsgBody, msgBody;

typedef struct MsgEntityToServer__storage_ {
  uint32_t _has_storage_[1];
  MsgType msgType;
  Join *join;
  MsgBody *msgBody;
  int64_t seq;
} MsgEntityToServer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgType",
        .dataTypeSpecific.enumDescFunc = MsgType_EnumDescriptor,
        .number = MsgEntityToServer_FieldNumber_MsgType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgEntityToServer__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgEntityToServer_FieldNumber_Seq,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgEntityToServer__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "join",
        .dataTypeSpecific.clazz = GPBObjCClass(Join),
        .number = MsgEntityToServer_FieldNumber_Join,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgEntityToServer__storage_, join),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(MsgBody),
        .number = MsgEntityToServer_FieldNumber_MsgBody,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgEntityToServer__storage_, msgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgEntityToServer)
                                   messageName:@"MsgEntityToServer"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgEntityToServer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\007\000\004\007\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgEntityToServer_MsgType_RawValue(MsgEntityToServer *message) {
  GPBDescriptor *descriptor = [MsgEntityToServer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgEntityToServer_FieldNumber_MsgType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgEntityToServer_MsgType_RawValue(MsgEntityToServer *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgEntityToServer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgEntityToServer_FieldNumber_MsgType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MsgEntityToFrontEnd

@implementation MsgEntityToFrontEnd

@dynamic msgType;
@dynamic hasState, state;
@dynamic hasMsgBody, msgBody;
@dynamic hasCreateSessionMsg, createSessionMsg;
@dynamic hasAgentUserJoinSessionMsg, agentUserJoinSessionMsg;
@dynamic hasHasReadReceiptMsg, hasReadReceiptMsg;
@dynamic hasEndSessionMsg, endSessionMsg;

typedef struct MsgEntityToFrontEnd__storage_ {
  uint32_t _has_storage_[1];
  MsgType msgType;
  State *state;
  MsgBody *msgBody;
  CreateSessionMsg *createSessionMsg;
  AgentUserJoinSessionMsg *agentUserJoinSessionMsg;
  HasReadReceiptMsg *hasReadReceiptMsg;
  EndSessionMsg *endSessionMsg;
} MsgEntityToFrontEnd__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgType",
        .dataTypeSpecific.enumDescFunc = MsgType_EnumDescriptor,
        .number = MsgEntityToFrontEnd_FieldNumber_MsgType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgEntityToFrontEnd__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "state",
        .dataTypeSpecific.clazz = GPBObjCClass(State),
        .number = MsgEntityToFrontEnd_FieldNumber_State,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgEntityToFrontEnd__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "msgBody",
        .dataTypeSpecific.clazz = GPBObjCClass(MsgBody),
        .number = MsgEntityToFrontEnd_FieldNumber_MsgBody,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgEntityToFrontEnd__storage_, msgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createSessionMsg",
        .dataTypeSpecific.clazz = GPBObjCClass(CreateSessionMsg),
        .number = MsgEntityToFrontEnd_FieldNumber_CreateSessionMsg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgEntityToFrontEnd__storage_, createSessionMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "agentUserJoinSessionMsg",
        .dataTypeSpecific.clazz = GPBObjCClass(AgentUserJoinSessionMsg),
        .number = MsgEntityToFrontEnd_FieldNumber_AgentUserJoinSessionMsg,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgEntityToFrontEnd__storage_, agentUserJoinSessionMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hasReadReceiptMsg",
        .dataTypeSpecific.clazz = GPBObjCClass(HasReadReceiptMsg),
        .number = MsgEntityToFrontEnd_FieldNumber_HasReadReceiptMsg,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgEntityToFrontEnd__storage_, hasReadReceiptMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endSessionMsg",
        .dataTypeSpecific.clazz = GPBObjCClass(EndSessionMsg),
        .number = MsgEntityToFrontEnd_FieldNumber_EndSessionMsg,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MsgEntityToFrontEnd__storage_, endSessionMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgEntityToFrontEnd)
                                   messageName:@"MsgEntityToFrontEnd"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgEntityToFrontEnd__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\006\001\007\000\003\007\000\004\020\000\005\027\000\006\021\000\007\r\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgEntityToFrontEnd_MsgType_RawValue(MsgEntityToFrontEnd *message) {
  GPBDescriptor *descriptor = [MsgEntityToFrontEnd descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgEntityToFrontEnd_FieldNumber_MsgType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgEntityToFrontEnd_MsgType_RawValue(MsgEntityToFrontEnd *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgEntityToFrontEnd descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgEntityToFrontEnd_FieldNumber_MsgType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Join

@implementation Join

@dynamic uid;
@dynamic sessionId;
@dynamic token;

typedef struct Join__storage_ {
  uint32_t _has_storage_[1];
  NSString *uid;
  NSString *sessionId;
  NSString *token;
} Join__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = Join_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Join__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = Join_FieldNumber_SessionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Join__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = Join_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Join__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(Join)
                                   messageName:@"Join"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Join__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\002\t\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JoinResp

@implementation JoinResp

@dynamic sessionId;
@dynamic serverId;

typedef struct JoinResp__storage_ {
  uint32_t _has_storage_[1];
  NSString *sessionId;
  NSString *serverId;
} JoinResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = JoinResp_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JoinResp__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serverId",
        .dataTypeSpecific.clazz = Nil,
        .number = JoinResp_FieldNumber_ServerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JoinResp__storage_, serverId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(JoinResp)
                                   messageName:@"JoinResp"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JoinResp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\t\000\002\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgBody

@implementation MsgBody

@dynamic senderUid;
@dynamic receiverUid;
@dynamic msgType;
@dynamic msgSeq;
@dynamic encKey;
@dynamic msgBody;
@dynamic status;
@dynamic createTime;
@dynamic clientMsgId;
@dynamic sessionId;
@dynamic sendTime;

typedef struct MsgBody__storage_ {
  uint32_t _has_storage_[1];
  MsgType msgType;
  int32_t msgSeq;
  int32_t status;
  NSString *senderUid;
  NSString *receiverUid;
  NSString *encKey;
  NSString *msgBody;
  NSString *clientMsgId;
  NSString *sessionId;
  NSString *sendTime;
  int64_t createTime;
} MsgBody__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "senderUid",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBody_FieldNumber_SenderUid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgBody__storage_, senderUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiverUid",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBody_FieldNumber_ReceiverUid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgBody__storage_, receiverUid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.enumDescFunc = MsgType_EnumDescriptor,
        .number = MsgBody_FieldNumber_MsgType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgBody__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "msgSeq",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBody_FieldNumber_MsgSeq,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MsgBody__storage_, msgSeq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "encKey",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBody_FieldNumber_EncKey,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MsgBody__storage_, encKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgBody",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBody_FieldNumber_MsgBody,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MsgBody__storage_, msgBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBody_FieldNumber_Status,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MsgBody__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBody_FieldNumber_CreateTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MsgBody__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "clientMsgId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBody_FieldNumber_ClientMsgId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MsgBody__storage_, clientMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBody_FieldNumber_SessionId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MsgBody__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = MsgBody_FieldNumber_SendTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MsgBody__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MsgBody)
                                   messageName:@"MsgBody"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgBody__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\n\001\t\000\002\013\000\003\007\000\004\006\000\005\006\000\006\007\000\010\n\000\t\nA\000\n\t\000\013\010\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MsgBody_MsgType_RawValue(MsgBody *message) {
  GPBDescriptor *descriptor = [MsgBody descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgBody_FieldNumber_MsgType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMsgBody_MsgType_RawValue(MsgBody *message, int32_t value) {
  GPBDescriptor *descriptor = [MsgBody descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MsgBody_FieldNumber_MsgType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SessionBasic

@implementation SessionBasic

@dynamic sessionId;
@dynamic headIcon;
@dynamic uid;
@dynamic source;
@dynamic nickName;
@dynamic devNo;
@dynamic createTime;
@dynamic language;
@dynamic extra;
@dynamic hasLatestMsg, latestMsg;

typedef struct SessionBasic__storage_ {
  uint32_t _has_storage_[1];
  NSString *sessionId;
  NSString *headIcon;
  NSString *uid;
  NSString *source;
  NSString *nickName;
  NSString *devNo;
  NSString *language;
  NSString *extra;
  MsgBody *latestMsg;
  int64_t createTime;
} SessionBasic__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = SessionBasic_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SessionBasic__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "headIcon",
        .dataTypeSpecific.clazz = Nil,
        .number = SessionBasic_FieldNumber_HeadIcon,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SessionBasic__storage_, headIcon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uid",
        .dataTypeSpecific.clazz = Nil,
        .number = SessionBasic_FieldNumber_Uid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SessionBasic__storage_, uid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "source",
        .dataTypeSpecific.clazz = Nil,
        .number = SessionBasic_FieldNumber_Source,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SessionBasic__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nickName",
        .dataTypeSpecific.clazz = Nil,
        .number = SessionBasic_FieldNumber_NickName,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SessionBasic__storage_, nickName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "devNo",
        .dataTypeSpecific.clazz = Nil,
        .number = SessionBasic_FieldNumber_DevNo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SessionBasic__storage_, devNo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.clazz = Nil,
        .number = SessionBasic_FieldNumber_CreateTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SessionBasic__storage_, createTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "language",
        .dataTypeSpecific.clazz = Nil,
        .number = SessionBasic_FieldNumber_Language,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SessionBasic__storage_, language),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extra",
        .dataTypeSpecific.clazz = Nil,
        .number = SessionBasic_FieldNumber_Extra,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SessionBasic__storage_, extra),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "latestMsg",
        .dataTypeSpecific.clazz = GPBObjCClass(MsgBody),
        .number = SessionBasic_FieldNumber_LatestMsg,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SessionBasic__storage_, latestMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SessionBasic)
                                   messageName:@"SessionBasic"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SessionBasic__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\006\001\t\000\002\010\000\005\010\000\006\005\000\007\n\000\n\t\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateSessionMsg

@implementation CreateSessionMsg

@dynamic hasSessionBasic, sessionBasic;

typedef struct CreateSessionMsg__storage_ {
  uint32_t _has_storage_[1];
  SessionBasic *sessionBasic;
} CreateSessionMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionBasic",
        .dataTypeSpecific.clazz = GPBObjCClass(SessionBasic),
        .number = CreateSessionMsg_FieldNumber_SessionBasic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateSessionMsg__storage_, sessionBasic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(CreateSessionMsg)
                                   messageName:@"CreateSessionMsg"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateSessionMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\001\014\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AgentUserJoinSessionMsg

@implementation AgentUserJoinSessionMsg

@dynamic username;

typedef struct AgentUserJoinSessionMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *username;
} AgentUserJoinSessionMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .dataTypeSpecific.clazz = Nil,
        .number = AgentUserJoinSessionMsg_FieldNumber_Username,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AgentUserJoinSessionMsg__storage_, username),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(AgentUserJoinSessionMsg)
                                   messageName:@"AgentUserJoinSessionMsg"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AgentUserJoinSessionMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HasReadReceiptMsg

@implementation HasReadReceiptMsg

@dynamic sessionId;
@dynamic hasReadSeqsArray, hasReadSeqsArray_Count;

typedef struct HasReadReceiptMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *sessionId;
  GPBInt64Array *hasReadSeqsArray;
} HasReadReceiptMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = HasReadReceiptMsg_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HasReadReceiptMsg__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hasReadSeqsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = HasReadReceiptMsg_FieldNumber_HasReadSeqsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HasReadReceiptMsg__storage_, hasReadSeqsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(HasReadReceiptMsg)
                                   messageName:@"HasReadReceiptMsg"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HasReadReceiptMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\010A\000\002\000hasReadSeqs\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KickOffLineMsg

@implementation KickOffLineMsg

@dynamic userId;
@dynamic identityId;

typedef struct KickOffLineMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *identityId;
} KickOffLineMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = KickOffLineMsg_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KickOffLineMsg__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityId",
        .dataTypeSpecific.clazz = Nil,
        .number = KickOffLineMsg_FieldNumber_IdentityId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KickOffLineMsg__storage_, identityId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(KickOffLineMsg)
                                   messageName:@"KickOffLineMsg"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KickOffLineMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\001\005A\000\002\tA\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EndSessionMsg

@implementation EndSessionMsg

@dynamic sessionId;

typedef struct EndSessionMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *sessionId;
} EndSessionMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = EndSessionMsg_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EndSessionMsg__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(EndSessionMsg)
                                   messageName:@"EndSessionMsg"
                               fileDescription:&MsggatewayRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EndSessionMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\001\010A\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
